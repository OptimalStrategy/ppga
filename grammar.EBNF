program   ::= statement* EOF ;

statement ::= var_decl 
            | fn_decl 
            | block 
            | if_stmt
            | for_stmt
            | while_stmt
            | return
            | exprStmt 
            | "break" 
            ; (* | "continue" *)

block      ::=  "{" statement* "}" 
             ;
fn_decl    ::= "fn" IDENTIFIER "(" params? ")" body ;
var_decl   ::= ( "let" | "global" ) ( IDENTIFIER )+ ( "=" expression )? ( "?" )? ";" ;
if_stmt    ::= "if" expression block ( else ( if_stmt | block ) )?;
for_stmt   ::= ( "for" | "fori" ) IDENTIFIER ("," IDENTIFIER )* "in" ( range | arguments ) block ;
while_stmt ::= "while" expression block;
return     ::= "return" arguments? ;
expr_stmt  ::= assignment ";" ;

assignment      ::= assignable ( "," assignable )* ( "+=" | "-=" | "*=" | "/=", "**=" | "=" ) expression
                  | expression
                  ;
expression      ::= default_op | lambda_decl ;
default_op      ::= logic_or ( "??" logic_or )? ;
logic_or        ::= logic_and ( "or" logic_and )* ;
logic_and       ::= equality ( "and" equality )* ;
equality        ::= comparison ( ( "!=" | "==" ) comparison )* ;
comparison      ::= addition ( ( ">" | ">=" | "<" | "<=" ) addition )* ;
addition        ::= multiplication ( ( "-" | "+" ) multiplication )* ;
multiplication  ::= exponentiation ( ( "/" | "\" | "*" ) exponentiation )* ;
exponentiation  ::= unary ( ( "**" ) exponentiation )* ;
unary           ::= ( "not" | "-" | "..." ) unary
                  | "len" "(" expression ")"
                  | call
                  ;
call            ::=  primary 
                     ( "(" arguments? ")" | "." IDENTIFIER | "[" expression "]" )* 
                     ( err_block )* 
                  ;

err_block  ::= "err" block ;

primary        ::= "nil"
                | "true" 
                | "false" 
                | NUMBER
                | FSTRING
                | STRING
                | IDENTIFIER
                | VARIADICS
                | "(" expression ")" 
                | "[" arguments? "]"
                | "{" pairs? "}"
                | "lua" "{" .* "}" 
                ;


assignable ::= IDENTIFIER | get | get_item  ;
(* Allow an optional trailing comma *)
params     ::= IDENTIFIER ( "?" )? ( "," IDENTIFIER ( "?" )? )* ( "," )? ;  
arguments  ::= expression ( "," expression)* ( "," )? ;
pairs      ::= pair ("," pair )* ( "," )? ;
pair       ::= expr "=" expr ;

VARIADICS  ::= "@" ;
IDENTIFIER ::= < [a-zA-Z_][a-zA-Z0-9_]* >;
EOF        ::= <END OF FILE> ;